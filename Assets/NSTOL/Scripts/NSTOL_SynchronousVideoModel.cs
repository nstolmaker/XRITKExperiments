using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class NSTOL_SynchronousVideoModel 
{
    [RealtimeProperty(100, true, true)]
    private int _frameNumber = 0;
    [RealtimeProperty(101, true, true)]
    private string _playbackURL = "";
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class NSTOL_SynchronousVideoModel : IModel {
    // Properties
    public int frameNumber {
        get { return _cache.LookForValueInCache(_frameNumber, entry => entry.frameNumberSet, entry => entry.frameNumber); }
        set { if (value == frameNumber) return; _cache.UpdateLocalCache(entry => { entry.frameNumberSet = true; entry.frameNumber = value; return entry; }); FireFrameNumberDidChange(value); }
    }
    public string playbackURL {
        get { return _cache.LookForValueInCache(_playbackURL, entry => entry.playbackURLSet, entry => entry.playbackURL); }
        set { if (value == playbackURL) return; _cache.UpdateLocalCache(entry => { entry.playbackURLSet = true; entry.playbackURL = value; return entry; }); FirePlaybackURLDidChange(value); }
    }
    
    // Events
    public delegate void FrameNumberDidChange(NSTOL_SynchronousVideoModel model, int value);
    public event         FrameNumberDidChange frameNumberDidChange;
    public delegate void PlaybackURLDidChange(NSTOL_SynchronousVideoModel model, string value);
    public event         PlaybackURLDidChange playbackURLDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool   frameNumberSet;
        public int    frameNumber;
        public bool   playbackURLSet;
        public string playbackURL;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public NSTOL_SynchronousVideoModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FireFrameNumberDidChange(int value) {
        try {
            if (frameNumberDidChange != null)
                frameNumberDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    public void FirePlaybackURLDidChange(string value) {
        try {
            if (playbackURLDidChange != null)
                playbackURLDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        FrameNumber = 100,
        PlaybackURL = 101,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _frameNumber = frameNumber;
            _playbackURL = playbackURL;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteVarint32Length((uint)PropertyID.FrameNumber, (uint)_frameNumber);
            length += WriteStream.WriteStringLength((uint)PropertyID.PlaybackURL, _playbackURL);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.frameNumberSet)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.FrameNumber, (uint)entry.frameNumber);
                if (entry.playbackURLSet)
                    length += WriteStream.WriteStringLength((uint)PropertyID.PlaybackURL, entry.playbackURL);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteVarint32((uint)PropertyID.FrameNumber, (uint)_frameNumber);
            stream.WriteString((uint)PropertyID.PlaybackURL, _playbackURL);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.frameNumberSet || entry.playbackURLSet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.frameNumberSet)
                    stream.WriteVarint32((uint)PropertyID.FrameNumber, (uint)entry.frameNumber);
                if (entry.playbackURLSet)
                    stream.WriteString((uint)PropertyID.PlaybackURL, entry.playbackURL);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool frameNumberExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.frameNumberSet);
        bool playbackURLExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.playbackURLSet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.FrameNumber: {
                    int previousValue = _frameNumber;
                    
                    _frameNumber = (int)stream.ReadVarint32();
                    
                    if (!frameNumberExistsInChangeCache && _frameNumber != previousValue)
                        FireFrameNumberDidChange(_frameNumber);
                    break;
                }
                case (uint)PropertyID.PlaybackURL: {
                    string previousValue = _playbackURL;
                    
                    _playbackURL = stream.ReadString();
                    
                    if (!playbackURLExistsInChangeCache && _playbackURL != previousValue)
                        FirePlaybackURLDidChange(_playbackURL);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
